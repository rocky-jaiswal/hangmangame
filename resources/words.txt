Are you looking for a gentle introduction to Clojure? Do you already have a back‐ ground in another programming language? Perfect! This book is for you. We will be covering programming concepts as they relate to Clojure and its unique design. We
Preface will also touch on object-oriented programming and concepts in comparison to func‐ tional programming. In the dicussion, we will be assuming familiarity with object- oriented development. So, if you are coming from another language like Ruby or Java, you should feel right at home. If you are a newer programmer, this book will be best paired with a more general introduction or reference to programming concepts.
If you are a language expert, or want a deep dive into every nook and cranny of Clo‐ jure, this book is most likely not for you. We will be concentrating on the major aspects of the language, not the minutiae, with the goal being to learn how to think Clojure. The same philosophy goes for tools and libraries in the Clojure ecosystem. We are striving for a primer that will present an overall holistic view of the most com‐ mon and pragmatic parts, so that after finishing the book you will be comfortable and ready to start living Clojure.
How to Use This Book The structure of this book is built around training with knowledge and practice to live Clojure. Just like the inspirations for it, it is composed of two main parts. Part I is a tour of the simplicity and power of the Clojure programming language. It will cover useful libraries and common uses of Clojure. Part II is the Living Clojure Training Program. It will take you through a weekly training program designed to give you the practice, knowledge, and tools you need to get up and running and thriving as a Clo‐ jure developer.
The first half of the book will introduce the language, along with some code exam‐ ples. There are a few important things to keep in mind, as outlined in the following subsections.
Do Try the Examples I know it is tempting to read through the book as fast as possible. But actually typing in the code examples and seeing the magic for yourself will help your understanding grow. Take the time to try out the new concepts and commands for yourself. We will be walking through setting up your environment to run Clojure later in this Preface.
Don’t Feel Overwhelmed We are going to cover a lot of material during the first half of the book. It is not all going to sink in right away. That is perfectly fine! In fact, this book was designed for that. The second half of the book is a training program that builds on the overview so that the basic language concepts really sink in with use. Once you start the training program, and questions start to come up, you will have all the tools and general knowledge to know where to look for the solutions.
Again, it takes time to learn to think in a new way. Be patient. As you explore Clojure, the story of Alice in Wonderland will be woven through the code examples as well. Her adventures will remind you to relax, smile, and have fun on your journey. Used for program listings, as well as within paragraphs to refer to program ele‐ ments such as variable or function names, databases, data types, environment variables, statements, and keywords. The developer community in Cincinnati. I call you all my friends and am eternally grateful for your support and encouragement. Also, all of the regulars at the Friday morning coffee group, who likewise helped me keep my sanity.
The Clojure community for making it such a great place to grow and learn Clojure. Rich Hickey, Stu Halloway, Justin Gehtland, and all of Cognitect for creating great software. Alex Miller for being a superb guy and bringing the community together with incredible conferences. Michael Fogus and Chris Houser for  e Joy of Clojure, for my first introduction to Clojure and my continued inspiration. All the many peo‐ ple of the Clojure community: David Nolen, Stuart Sierra, Alex Baranosky, Alan Dipert, Ambrose Bonnaire-Sergeant, Jen Smith, Sam Aaron, Jonathan Graham, Eric Normand, Aaron Brooks, Brenton Ashworth, Luke VanderHart, Bodil Stokke, Bruce Durling, Chas Emerick, Tavis Rudd, Chris Ford, Craig Andera, Michael Nygard, Yodit Stanton, David Pollak, Daniel Higginbotham, Ryan Neufeld, Nada Amin, Wil‐ liam Byrd, Anna Pawlicka, Kyle Kingsbury, Zach Tellman, Zack Maril, all my Clojure friends at Outpace Systems, and all the other people whose names I missed.
Finally, thanks to my family who put up with me working all those weekends and evenings. I love you madly and I promise it will not be the first part in a trilogy.
